---

- name:               Make sure the deploy user exists
  user:               name=deploy shell=/bin/bash generate_ssh_keys=yes

- name:               Setup authorized keys for the deploy user
  authorized_key:     user=deploy
                      key="{{ item }}"
  with_file:
    - joost-air.pub
    - joost-gashouder.pub
    - melanie-gashouder.pub
    - annebeth-macbook.pub
    - melanie-macbook.pub

- name:       Install Ruby dependencies
  apt:        pkg={{ item }} state=present
  with_items: ruby_dependencies

- name:       Download the Ruby source
  get_url:    url={{ ruby_download_location }}
              dest=/usr/local/src/{{ ruby_version }}.tar.bz2
              sha256sum={{ ruby_checksum }}

- name:       Generate the Ruby installation script on the server
  template:   src=ruby.j2
              dest=/usr/local/src/install-ruby.sh
              mode=0700

- name:       Run the Ruby installation script
  command:    /usr/local/src/install-ruby.sh
              creates=/usr/local/bin/ruby

- copy:       src=gemrc dest=/etc/gemrc

- command:    gem install bundler
              creates=/usr/local/bin/bundle

- name:       Ensure the Phusion PGP key is installed
  apt_key:    id=AC40B2F7 state=present url="http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x561F9B9CAC40B2F7"

- apt:        pkg=apt-transport-https state=present

- name:               Ensure the passenger apt repository is added
  apt_repository:     state=present repo='deb https://oss-binaries.phusionpassenger.com/apt/passenger precise main'

- name:       Install Rails dependencies
  apt:        pkg={{ item }} state=present
  with_items: rails_dependencies

- name:       Generate SSL Certificate Signing Request
  command:    openssl req -nodes -newkey rsa:2048 -keyout /etc/ssl/private/{{ domain }}.key -out /etc/ssl/private/{{ domain }}.csr -subj "{{ ssl_subject }}" creates=/etc/ssl/private/{{ domain }}.key

- name:       Generate self-signed certificate, to be replaced with a CA signed one
  command:    openssl x509 -req -days 365 -in /etc/ssl/private/{{ domain }}.csr -signkey /etc/ssl/private/{{ domain }}.key -out /etc/ssl/private/{{ domain }}.cer creates=/etc/ssl/private/{{ domain }}.cer

- file:       path=/etc/ssl/private/{{ domain }}.key mode=0600
- file:       path=/etc/ssl/private/{{ domain }}.csr mode=0600
- file:       path=/etc/ssl/private/{{ domain }}.cer mode=0600

- name:       Create virtual host directory structure
  file:       path={{ item }} owner=deploy state=directory
  with_items:
    - /var/www/releases/init/public
    - /var/www/shared
    - /var/staging/releases/init/public
    - /var/staging/shared

- copy:       src=index.html dest=/var/www/releases/init/public/index.html      owner=deploy
- copy:       src=index.html dest=/var/staging/releases/init/public/index.html  owner=deploy

- file:       src=/var/www/releases/init        dest=/var/www/current           state=link
- file:       src=/var/staging/releases/init    dest=/var/staging/current       state=link

- name:       Enable the redirect virtual host
  file:       src=/etc/nginx/sites-available/redirect dest=/etc/nginx/sites-enabled/redirect state=link

- name:       Install nginx config and virtual hosts
  template:   src={{ item.src }}
              dest={{ item.dest }}
              backup=yes
  with_items:
    - { src: 'default.j2',      dest: '/etc/nginx/sites-available/default' }
    - { src: 'redirect.j2',     dest: '/etc/nginx/sites-available/redirect' }
    - { src: 'staging.j2',      dest: '/etc/nginx/sites-available/staging' }
    - { src: 'nginx.j2',        dest: '/etc/nginx/nginx.conf' }
  notify:
    - Restart nginx

- name:       Ensure nginx is running
  service:    name=nginx state=started enabled=yes

